name: Build and Test Docker Image

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run tests
        run: npm run test:run
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Build Next.js
        run: npm run build
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: todo-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # 建立自訂網路讓容器能夠連接
          docker network create test-network
          
          # 啟動 PostgreSQL 容器
          docker run --rm -d \
            --name test-postgres \
            --network test-network \
            -e POSTGRES_USER=testuser \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=testdb \
            postgres:17-alpine

          # 等待 PostgreSQL 啟動
          sleep 15

          # 測試應用程式容器
          docker run --rm -d \
            --name test-container \
            --network test-network \
            -p 3000:3000 \
            -e DATABASE_URL="postgresql://testuser:testpass@test-postgres:5432/testdb" \
            todo-app:test

          # 等待容器啟動並檢查狀態
          sleep 45

          # 檢查容器是否正在運行
          if docker ps | grep test-container; then
            echo "✓ Container is running successfully"
            docker logs test-container
          else
            echo "✗ Container failed to start"
            docker logs test-container
            # 清理
            docker stop test-postgres 2>/dev/null || true
            docker network rm test-network 2>/dev/null || true
            exit 1
          fi

          echo "Docker image test passed!"

          # 清理
          docker stop test-container test-postgres
          docker network rm test-network
